//data.cpp by Dan Honeycutt.  This software is public domain.
//You may use this software as you wish.  There is no warranty.
#include "chess.h"

/**********************************************************************
program variables.
**********************************************************************/

const char *name = "Simon v1.3 JA";    //name and version

//=====================================================================
//position & search variables.  These variables should be wrapped
//up in a structure if you plan an smp implementation.
//=====================================================================
//basic position data
int color;                  //color moving
int board[64];              //array board
int castle[MAX_PLY+2];      //castle rights
int ep_sq[MAX_PLY+2];       //ep square
int g_ply[MAX_PLY+2];       //half move clock
//bitboard position data
U64 bbd[16];                //bitboards
U64 bb_rl90;                //rotated bitboards
U64 bb_rl45;
U64 bb_rr45;
U64 bb_move;                //bitboard move
//hash keys & pin data
U64 key_1;                  //transition hash key
U64 key_2;                  //pawn hash key
U64 pin_key1;
U64 pin_save;
U64 pin_mask[64];
//piece counts & king locations
int num_men[16];            //men/material counts
int wk_sq;                  //white king square
int bk_sq;                  //black king square
//history heuristic
unsigned hh_white[4096];
unsigned hh_black[4096];
unsigned hh_max;
//move list & search tree
s_move move_list[4096];
s_tree tree[MAX_PLY+2];
//pv & eval
int pv_len[MAX_PLY+2];
int pv_move[MAX_PLY+2][MAX_PLY+2];

//=====================================================================
//global variables
//=====================================================================
const int p_val = 100;            //piece values
const int n_val = 300;
const int b_val = 300;
const int r_val = 500;
const int q_val = 900;
const int piece_value[16] = {
  0, p_val, 0, n_val, 0, b_val, r_val, q_val,
  0, p_val, 0, n_val, 0, b_val, r_val, q_val};

char men_upper[9] = " PKN BRQ";   //piece initials
char men_lower[9] = " pkn brq";

int kolor;                  //computer color
int move_num;               //move number
int game_over;              //FIN_XXX
int abort_search;
int iter;                   //current iteration
int draw_score = 0;
unsigned  nodes;            //nodes searched

int root_score = 0;         //score
int root_moves;             //root moves
s_move root_list[256];

//winboard values
int xb_level_moves;         //moves per control
int xb_level_min;           //min per control/game
int xb_level_inc;           //sec increment per move
int xb_time;                //our remaing time 1/100's sec
int xb_otim;                //opponent remaining time
int xb_st = 2;              //sec per move
int xb_sd = 99;             //max depth
bool xb_post = TRUE;        //post pv
bool xb_easy = TRUE;        //no ponder
bool xb_mode = FALSE;       //set w/xboard command

//time control
int tc_moves = 0;           //moves remaining to time control
int tc_target = 2000;       //target search time 1/1000's sec
int tc_start;

//random numbers for hash keys
U64 (*rnd_psq)[64];         //rnd_psq[16][64] piece/squares
U64 rnd_epc[48] = {0};      //en passant/castle
U64 rnd_btm;                //black to move

int hix;                    //game history
s_hist hist[MAX_HIX+2];

char err_msg[64];           //buffer for error messages

//all bits
const U64 all_64 = 0xffffffffffffffff;

//============================================================================
//masks to set/clear squares
//============================================================================
const U64 sq_set[64] = {    //set a square on the normal board
  0x0000000000000001,0x0000000000000002,0x0000000000000004,0x0000000000000008,
  0x0000000000000010,0x0000000000000020,0x0000000000000040,0x0000000000000080,
  0x0000000000000100,0x0000000000000200,0x0000000000000400,0x0000000000000800,
  0x0000000000001000,0x0000000000002000,0x0000000000004000,0x0000000000008000,
  0x0000000000010000,0x0000000000020000,0x0000000000040000,0x0000000000080000,
  0x0000000000100000,0x0000000000200000,0x0000000000400000,0x0000000000800000,
  0x0000000001000000,0x0000000002000000,0x0000000004000000,0x0000000008000000,
  0x0000000010000000,0x0000000020000000,0x0000000040000000,0x0000000080000000,
  0x0000000100000000,0x0000000200000000,0x0000000400000000,0x0000000800000000,
  0x0000001000000000,0x0000002000000000,0x0000004000000000,0x0000008000000000,
  0x0000010000000000,0x0000020000000000,0x0000040000000000,0x0000080000000000,
  0x0000100000000000,0x0000200000000000,0x0000400000000000,0x0000800000000000,
  0x0001000000000000,0x0002000000000000,0x0004000000000000,0x0008000000000000,
  0x0010000000000000,0x0020000000000000,0x0040000000000000,0x0080000000000000,
  0x0100000000000000,0x0200000000000000,0x0400000000000000,0x0800000000000000,
  0x1000000000000000,0x2000000000000000,0x4000000000000000,0x8000000000000000};
const U64 sq_clr[64] = {    //clear a square on the normal board
  0xfffffffffffffffe,0xfffffffffffffffd,0xfffffffffffffffb,0xfffffffffffffff7,
  0xffffffffffffffef,0xffffffffffffffdf,0xffffffffffffffbf,0xffffffffffffff7f,
  0xfffffffffffffeff,0xfffffffffffffdff,0xfffffffffffffbff,0xfffffffffffff7ff,
  0xffffffffffffefff,0xffffffffffffdfff,0xffffffffffffbfff,0xffffffffffff7fff,
  0xfffffffffffeffff,0xfffffffffffdffff,0xfffffffffffbffff,0xfffffffffff7ffff,
  0xffffffffffefffff,0xffffffffffdfffff,0xffffffffffbfffff,0xffffffffff7fffff,
  0xfffffffffeffffff,0xfffffffffdffffff,0xfffffffffbffffff,0xfffffffff7ffffff,
  0xffffffffefffffff,0xffffffffdfffffff,0xffffffffbfffffff,0xffffffff7fffffff,
  0xfffffffeffffffff,0xfffffffdffffffff,0xfffffffbffffffff,0xfffffff7ffffffff,
  0xffffffefffffffff,0xffffffdfffffffff,0xffffffbfffffffff,0xffffff7fffffffff,
  0xfffffeffffffffff,0xfffffdffffffffff,0xfffffbffffffffff,0xfffff7ffffffffff,
  0xffffefffffffffff,0xffffdfffffffffff,0xffffbfffffffffff,0xffff7fffffffffff,
  0xfffeffffffffffff,0xfffdffffffffffff,0xfffbffffffffffff,0xfff7ffffffffffff,
  0xffefffffffffffff,0xffdfffffffffffff,0xffbfffffffffffff,0xff7fffffffffffff,
  0xfeffffffffffffff,0xfdffffffffffffff,0xfbffffffffffffff,0xf7ffffffffffffff,
  0xefffffffffffffff,0xdfffffffffffffff,0xbfffffffffffffff,0x7fffffffffffffff};
const U64 sq_set_rl90[64] = {    //set a square on the rl90 board
  0x0000000000000080,0x0000000000008000,0x0000000000800000,0x0000000080000000,
  0x0000008000000000,0x0000800000000000,0x0080000000000000,0x8000000000000000,
  0x0000000000000040,0x0000000000004000,0x0000000000400000,0x0000000040000000,
  0x0000004000000000,0x0000400000000000,0x0040000000000000,0x4000000000000000,
  0x0000000000000020,0x0000000000002000,0x0000000000200000,0x0000000020000000,
  0x0000002000000000,0x0000200000000000,0x0020000000000000,0x2000000000000000,
  0x0000000000000010,0x0000000000001000,0x0000000000100000,0x0000000010000000,
  0x0000001000000000,0x0000100000000000,0x0010000000000000,0x1000000000000000,
  0x0000000000000008,0x0000000000000800,0x0000000000080000,0x0000000008000000,
  0x0000000800000000,0x0000080000000000,0x0008000000000000,0x0800000000000000,
  0x0000000000000004,0x0000000000000400,0x0000000000040000,0x0000000004000000,
  0x0000000400000000,0x0000040000000000,0x0004000000000000,0x0400000000000000,
  0x0000000000000002,0x0000000000000200,0x0000000000020000,0x0000000002000000,
  0x0000000200000000,0x0000020000000000,0x0002000000000000,0x0200000000000000,
  0x0000000000000001,0x0000000000000100,0x0000000000010000,0x0000000001000000,
  0x0000000100000000,0x0000010000000000,0x0001000000000000,0x0100000000000000};
const U64 sq_set_rr45[64] = {    //set a square on the rr45 board
  0x0000000010000000,0x0000000000200000,0x0000000000008000,0x0000000000000400,
  0x0000000000000040,0x0000000000000008,0x0000000000000002,0x0000000000000001,
  0x0000001000000000,0x0000000020000000,0x0000000000400000,0x0000000000010000,
  0x0000000000000800,0x0000000000000080,0x0000000000000010,0x0000000000000004,
  0x0000080000000000,0x0000002000000000,0x0000000040000000,0x0000000000800000,
  0x0000000000020000,0x0000000000001000,0x0000000000000100,0x0000000000000020,
  0x0002000000000000,0x0000100000000000,0x0000004000000000,0x0000000080000000,
  0x0000000001000000,0x0000000000040000,0x0000000000002000,0x0000000000000200,
  0x0040000000000000,0x0004000000000000,0x0000200000000000,0x0000008000000000,
  0x0000000100000000,0x0000000002000000,0x0000000000080000,0x0000000000004000,
  0x0400000000000000,0x0080000000000000,0x0008000000000000,0x0000400000000000,
  0x0000010000000000,0x0000000200000000,0x0000000004000000,0x0000000000100000,
  0x2000000000000000,0x0800000000000000,0x0100000000000000,0x0010000000000000,
  0x0000800000000000,0x0000020000000000,0x0000000400000000,0x0000000008000000,
  0x8000000000000000,0x4000000000000000,0x1000000000000000,0x0200000000000000,
  0x0020000000000000,0x0001000000000000,0x0000040000000000,0x0000000800000000};
const U64 sq_set_rl45[64] = {    //set a square on the rl45 board
  0x0000000000000001,0x0000000000000004,0x0000000000000020,0x0000000000000200,
  0x0000000000004000,0x0000000000100000,0x0000000008000000,0x0000000800000000,
  0x0000000000000002,0x0000000000000010,0x0000000000000100,0x0000000000002000,
  0x0000000000080000,0x0000000004000000,0x0000000400000000,0x0000040000000000,
  0x0000000000000008,0x0000000000000080,0x0000000000001000,0x0000000000040000,
  0x0000000002000000,0x0000000200000000,0x0000020000000000,0x0001000000000000,
  0x0000000000000040,0x0000000000000800,0x0000000000020000,0x0000000001000000,
  0x0000000100000000,0x0000010000000000,0x0000800000000000,0x0020000000000000,
  0x0000000000000400,0x0000000000010000,0x0000000000800000,0x0000000080000000,
  0x0000008000000000,0x0000400000000000,0x0010000000000000,0x0200000000000000,
  0x0000000000008000,0x0000000000400000,0x0000000040000000,0x0000004000000000,
  0x0000200000000000,0x0008000000000000,0x0100000000000000,0x1000000000000000,
  0x0000000000200000,0x0000000020000000,0x0000002000000000,0x0000100000000000,
  0x0004000000000000,0x0080000000000000,0x0800000000000000,0x4000000000000000,
  0x0000000010000000,0x0000001000000000,0x0000080000000000,0x0002000000000000,
  0x0040000000000000,0x0400000000000000,0x2000000000000000,0x8000000000000000};

//============================================================================
//mask to select a rank/file
//============================================================================
const U64 rank_1 = 0x00000000000000ff;
const U64 rank_2 = 0x000000000000ff00;
const U64 rank_3 = 0x0000000000ff0000;
const U64 rank_4 = 0x00000000ff000000;
const U64 rank_5 = 0x000000ff00000000;
const U64 rank_6 = 0x0000ff0000000000;
const U64 rank_7 = 0x00ff000000000000;
const U64 rank_8 = 0xff00000000000000;
const U64 mask_row[8] = {
  rank_1,rank_2,rank_3,rank_4,rank_5,rank_6,rank_7,rank_8};

const U64 file_a = 0x0101010101010101;
const U64 file_b = 0x0202020202020202;
const U64 file_c = 0x0404040404040404;
const U64 file_d = 0x0808080808080808;
const U64 file_e = 0x1010101010101010;
const U64 file_f = 0x2020202020202020;
const U64 file_g = 0x4040404040404040;
const U64 file_h = 0x8080808080808080;
const U64 mask_col[8] = {
  file_a,file_b,file_c,file_d,file_e,file_f,file_g,file_h};

//============================================================================
//attack patterns - bits set for squares which a piece attacks
//============================================================================
static const U64 ap_pawn[80] = {
  0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000,
  0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000,
  0x0000000000000002,0x0000000000000005,0x000000000000000a,0x0000000000000014,
  0x0000000000000028,0x0000000000000050,0x00000000000000a0,0x0000000000000040,
  0x0000000000000200,0x0000000000000500,0x0000000000000a00,0x0000000000001400,
  0x0000000000002800,0x0000000000005000,0x000000000000a000,0x0000000000004000,
  0x0000000000020000,0x0000000000050000,0x00000000000a0000,0x0000000000140000,
  0x0000000000280000,0x0000000000500000,0x0000000000a00000,0x0000000000400000,
  0x0000000002000000,0x0000000005000000,0x000000000a000000,0x0000000014000000,
  0x0000000028000000,0x0000000050000000,0x00000000a0000000,0x0000000040000000,
  0x0000000200000000,0x0000000500000000,0x0000000a00000000,0x0000001400000000,
  0x0000002800000000,0x0000005000000000,0x000000a000000000,0x0000004000000000,
  0x0000020000000000,0x0000050000000000,0x00000a0000000000,0x0000140000000000,
  0x0000280000000000,0x0000500000000000,0x0000a00000000000,0x0000400000000000,
  0x0002000000000000,0x0005000000000000,0x000a000000000000,0x0014000000000000,
  0x0028000000000000,0x0050000000000000,0x00a0000000000000,0x0040000000000000,
  0x0200000000000000,0x0500000000000000,0x0a00000000000000,0x1400000000000000,
  0x2800000000000000,0x5000000000000000,0xa000000000000000,0x4000000000000000,
  0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000,
  0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000};

const U64 *ap_bpawn = ap_pawn;
const U64 *ap_wpawn = ap_pawn + 16;

const U64 ap_knight[64] = {
  0x0000000000020400,0x0000000000050800,0x00000000000a1100,0x0000000000142200,
  0x0000000000284400,0x0000000000508800,0x0000000000a01000,0x0000000000402000,
  0x0000000002040004,0x0000000005080008,0x000000000a110011,0x0000000014220022,
  0x0000000028440044,0x0000000050880088,0x00000000a0100010,0x0000000040200020,
  0x0000000204000402,0x0000000508000805,0x0000000a1100110a,0x0000001422002214,
  0x0000002844004428,0x0000005088008850,0x000000a0100010a0,0x0000004020002040,
  0x0000020400040200,0x0000050800080500,0x00000a1100110a00,0x0000142200221400,
  0x0000284400442800,0x0000508800885000,0x0000a0100010a000,0x0000402000204000,
  0x0002040004020000,0x0005080008050000,0x000a1100110a0000,0x0014220022140000,
  0x0028440044280000,0x0050880088500000,0x00a0100010a00000,0x0040200020400000,
  0x0204000402000000,0x0508000805000000,0x0a1100110a000000,0x1422002214000000,
  0x2844004428000000,0x5088008850000000,0xa0100010a0000000,0x4020002040000000,
  0x0400040200000000,0x0800080500000000,0x1100110a00000000,0x2200221400000000,
  0x4400442800000000,0x8800885000000000,0x100010a000000000,0x2000204000000000,
  0x0004020000000000,0x0008050000000000,0x00110a0000000000,0x0022140000000000,
  0x0044280000000000,0x0088500000000000,0x0010a00000000000,0x0020400000000000};

const U64 ap_queen[64] = {
  0x81412111090503fe,0x02824222120a07fd,0x0404844424150efb,0x08080888492a1cf7,
  0x10101011925438ef,0x2020212224a870df,0x404142444850e0bf,0x8182848890a0c07f,
  0x412111090503fe03,0x824222120a07fd07,0x04844424150efb0e,0x080888492a1cf71c,
  0x101011925438ef38,0x20212224a870df70,0x4142444850e0bfe0,0x82848890a0c07fc0,
  0x2111090503fe0305,0x4222120a07fd070a,0x844424150efb0e15,0x0888492a1cf71c2a,
  0x1011925438ef3854,0x212224a870df70a8,0x42444850e0bfe050,0x848890a0c07fc0a0,
  0x11090503fe030509,0x22120a07fd070a12,0x4424150efb0e1524,0x88492a1cf71c2a49,
  0x11925438ef385492,0x2224a870df70a824,0x444850e0bfe05048,0x8890a0c07fc0a090,
  0x090503fe03050911,0x120a07fd070a1222,0x24150efb0e152444,0x492a1cf71c2a4988,
  0x925438ef38549211,0x24a870df70a82422,0x4850e0bfe0504844,0x90a0c07fc0a09088,
  0x0503fe0305091121,0x0a07fd070a122242,0x150efb0e15244484,0x2a1cf71c2a498808,
  0x5438ef3854921110,0xa870df70a8242221,0x50e0bfe050484442,0xa0c07fc0a0908884,
  0x03fe030509112141,0x07fd070a12224282,0x0efb0e1524448404,0x1cf71c2a49880808,
  0x38ef385492111010,0x70df70a824222120,0xe0bfe05048444241,0xc07fc0a090888482,
  0xfe03050911214181,0xfd070a1222428202,0xfb0e152444840404,0xf71c2a4988080808,
  0xef38549211101010,0xdf70a82422212020,0xbfe0504844424140,0x7fc0a09088848281};

const U64 ap_king[64] = {
  0x0000000000000302,0x0000000000000705,0x0000000000000e0a,0x0000000000001c14,
  0x0000000000003828,0x0000000000007050,0x000000000000e0a0,0x000000000000c040,
  0x0000000000030203,0x0000000000070507,0x00000000000e0a0e,0x00000000001c141c,
  0x0000000000382838,0x0000000000705070,0x0000000000e0a0e0,0x0000000000c040c0,
  0x0000000003020300,0x0000000007050700,0x000000000e0a0e00,0x000000001c141c00,
  0x0000000038283800,0x0000000070507000,0x00000000e0a0e000,0x00000000c040c000,
  0x0000000302030000,0x0000000705070000,0x0000000e0a0e0000,0x0000001c141c0000,
  0x0000003828380000,0x0000007050700000,0x000000e0a0e00000,0x000000c040c00000,
  0x0000030203000000,0x0000070507000000,0x00000e0a0e000000,0x00001c141c000000,
  0x0000382838000000,0x0000705070000000,0x0000e0a0e0000000,0x0000c040c0000000,
  0x0003020300000000,0x0007050700000000,0x000e0a0e00000000,0x001c141c00000000,
  0x0038283800000000,0x0070507000000000,0x00e0a0e000000000,0x00c040c000000000,
  0x0302030000000000,0x0705070000000000,0x0e0a0e0000000000,0x1c141c0000000000,
  0x3828380000000000,0x7050700000000000,0xe0a0e00000000000,0xc040c00000000000,
  0x0203000000000000,0x0507000000000000,0x0a0e000000000000,0x141c000000000000,
  0x2838000000000000,0x5070000000000000,0xa0e0000000000000,0x40c0000000000000};

//============================================================================
//bit shift values for bishop attack rotated bitboard
//============================================================================
const char shr_bish_rr45[64] = {
 28, 21, 15, 10,  6,  3,  1,  0,
 36, 28, 21, 15, 10,  6,  3,  1,
 43, 36, 28, 21, 15, 10,  6,  3,
 49, 43, 36, 28, 21, 15, 10,  6,
 54, 49, 43, 36, 28, 21, 15, 10,
 58, 54, 49, 43, 36, 28, 21, 15,
 61, 58, 54, 49, 43, 36, 28, 21,
 63, 61, 58, 54, 49, 43, 36, 28};

const char shr_bish_rl45[64] = {
  0,  1,  3,  6, 10, 15, 21, 28,
  1,  3,  6, 10, 15, 21, 28, 36,
  3,  6, 10, 15, 21, 28, 36, 43,
  6, 10, 15, 21, 28, 36, 43, 49,
 10, 15, 21, 28, 36, 43, 49, 54,
 15, 21, 28, 36, 43, 49, 54, 58,
 21, 28, 36, 43, 49, 54, 58, 61,
 28, 36, 43, 49, 54, 58, 61, 63};

